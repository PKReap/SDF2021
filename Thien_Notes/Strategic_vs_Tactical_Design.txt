Strategic Design vs. Tactical Design

/\/\/\/\ AVOID These /\/\/\/\/\/\
Creating an upfront design is a BAD idea
An equal risk to this on the opposite of the spectrum is JID or Just in Time Design 
/\/\/\/\ AVOID These /\/\/\/\/\/\


Levels of Design
    - Try to have design in two separate levels one being a Course Grain High Level
    
Strategic Design is a an idea that provides direction on what to develope

Tactical Design 
    - Interested in what are the specifics of classes and what are the methods and what arguements they take 

One of the most important decisions we make is what not to decide on right now 


Instead make the decisions during the approrpriate time 

What we deal with everyday is a series of unknowns
    - Some of the knowns sometimes might be carrying unknowns with them 

Software has an observable affect where those outside always have suggestions about the software 


Strategic Design - Something you start at the beginning of a sprint (small up front design - Enough, minimum design)
    - Important to have at least some plan/design before coding
    - On big teams it's important to have discussions with teams in order to have cohession

Purpose of strategic design (Course Grain Details - High level) 
    - Gives a sense of direction
    - Think of it as a map that shows territories the small details such as roads and cities in this are not shown
                        (We don't need to know about the cities and roads until we take the trip itself)
    - A strategic design can not be correct in almost any non-trivial project, ment to be enhanced and evolved over time 
    - Avoding Changes is a sign of creating something that could be IRRELEVANT

Purpose of Tactical Design (Fine Grain Details - Low level)
    - The actual of the maps and where they lead to.

    ~ Questions to ask in this ~
        - What names should the variables and functions be?
        - Does it make sense for this functions to have this name?
        - Place yourself in the users point of view to see if the user could understand how the code would be use
        - If we do this x what are the consequences on maintainability
        - If not how can we make it easier to understand? 

    - Purpose of tactical design is to define what strategic design is doing
    - Fills in low level details and makes small tactical decisions during the way
    
/\/\/\/\/\ NOTE /\/\/\/\/\/\
Strategic Design points us in a particular direction
Tactical Design fine tunes our path on that direction
/\/\/\/\/\ NOTE /\/\/\/\/\/\

From requirements to design 

Use cases 

User stories 

Architecture



~ Develope prototypes and be willing to throw away code ~


The Architecture itself can fit inside the high level design as well as be able to be modified



Take Away ~ always be evolving your code and "Change is good" EVOOoLUUuuuUuUUTION



