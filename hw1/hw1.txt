Please keep all files related to a homework or an assignment within the appropriate directory. Files checked in outside of specific homework or assignment directory will not be reviewed or graded for that homework/assignment.

Check in and modify files as many times as you like. You will not be able to modify the files after the deadline.

You will work as a pair, both of you are responsible for the completed work in all assignments and homework. Reasonable effort is expected from each person. If you do not check in, you will not receive any scores. When pairing please switch who checks in so there is significant number of check in from each of you.

The deadlines are strict, there will be no extensions. Don't email any code to Venkat or to the mailing list. Your last check in before the deadline will be graded. If your last check in breaks the code, both you and your pair will lose significant points.

Please feel free to ask for frequent reviews. See the reviews/readme.txt file for details on how to ask for reviews.

You can evolve the answers and solutions based on the reviews. Only the latest checkin at the time of review will be looked at. Also the final check in will be the only one graded.

You are still responsible to successfully complete an homework or assignment even if your pair is a no-show. You can request to change pairs at any time and if there is another person in the class willing to pair with you we can make the switch.

A lot of help will be provided in this course, but you have to start early and ask for help along the way.                                                                      

Please read the academic honesty policy posted on the course mailing list.                   

The above details apply to all homework and assignments in this course.                   

Now to homework #1.
==============================================================================
HW1: Due 11:59PM September 10

1.
Inheritance is a powerful concept, but is also one of the most misused concepts in OOP. Give an example where inheritance is a reasonable choice.
Explain why you think it is a good choice in your example. Then give an example where delegation rather than inheritance is a better choice.
Again explain why you think it is a good choice in your example. Feel free to use any language you like for your examples.

~ inheritance.py ~
    We think inheritance should be used when the subclass shares very similar properties to the base class. 
    Inheritance allows for code reuse if the classes are very much in the same domain. In the example, only managers have 
    the ability to hire and fire people. But Since managers are employees themselves it is reasonable to have them inherit 
    from the employee class. Since managers are employees they too can be fired or hired as well. Inheritance is a reasonable 
    choice when the classes share large similarities as shown in the example. Inheritance can also help us achieve polymorphism 
    which allows multiple classes to use the same function to achieve different results depending on the class.
    Any job or function that requires an Employee can be substited by a manager as Managers are able to perform any task 
    an employee can due to inheritance. 
  

~ delegate.py ~ 
    We think delegation is a better choice when we only care about the functionality of something, not care about what its properties are.
    In the example, the implementation of the methods is delegated to the Check, Since the Check class creates a copy of the ticket
    it doesn't care how the methods are implemented but instead focused on getting the functionality to work. Its "Delegated" the work to perform. 
    We can also use delegation to achieve polymorphism as seen in the delegate.py example. The Check can take in any type of ticket delegates the 
    initialization and methods to the class allowing the class to perform different functions based on what was passed in.  
    We can see that by delegate receives an abstraction of a ticket and is used as an interface to perform its functionality.
    This allows us to abstract what a ticket is and how it is used. 
    This is a better choice over inhiertance since it reduces the cost of changing the code since whenever we need to make a change to a class
    we only need to change the implementation thus changing the functionality which is what the delegate cares about and uses.


2.
Collectively as a team, mention some of the design smells you have seen in code you have either written or looked at (written by someone else on projects you have worked on). Mention the smell, write a short description about it, and write the consequences (the drawbacks) of that smell. Please list at least five smells.


Bloated Class 
    Last semester we worked on building a Multiplayer Unity Game. We had a very smelly Board Manager that was way too bloated. 
    It handled too many things such as: player spawns, scores, player movement, resources, turns.
    It was used in many parts of the game and made the "Cost" of changing and adding featuring expensive.
    We ended up having to refactor the code and splitting the class up into multiple different managers. After refactoring it became so much easier to add features and not have to worry about how it would affect other features. For example, before there was a player movement method inside the big board manager which moved the characters. however, that class also held all the data for each player so we had to carry it around whenever
    we need information about the current state of each player. This entangled everything. After refactoring it and creating a players manager that 
    the sole purpose was to manage the players' information it became easier and less entangled allowing for a smoother development of the Game.


Undeleted Messy Comments
    One time on a group assignment one of my teammates had a habit of testing things out in the same file and commenting stuff out when trying something else out 
    He refused to delete anything and this made reading through the code very unproductive as most of the time was spent scrolling through or unused commented out code

In-Jokes as Names 
    During a hackathon, I created a piece of software that talked with the Twitter API. Our team had fun making it and while we were making it we named some of the functions and variables using In-jokes we made during the time. A couple of weeks later I wanted to make a bot using the Twitter API and thought to use that project as a reference. Unfortunately, I had forgotten what most of the jokes were and had trouble analyzing it as a reference.
    I had to walk through everything and decipher what some functions did.

Use of Different Naming Conventions
   When I was a teaching assistant last semester I came across codes that were written in different naming conventions over one file. 
   This makes searching through the code difficult and does not give an idea of what type of variables that we are looking into. For example 
   in JavaScript, you could use different conventions in a code with series of rules(camel case for field names, pascal case for enum names, input, type and scalar, and all caps for enum values)
   and it is okay but without any rules behind using random naming conventions smells.

Unnecessarily Complex Code
   During one of the courses I was taking, I got to look at a peer's code which I found very frustrating to read because there were many unnecessarily long functions that could be simplified easily. I found that the reason for this is people sometimes like to
   show off what they can code and do not focus on the readability of the functionality of the code, therefore making it hard for others to make sense of their code.


Total [10]: 10
Please spellcheck
