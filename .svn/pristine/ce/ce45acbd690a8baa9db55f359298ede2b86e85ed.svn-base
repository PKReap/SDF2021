~ Designing Software ~
    Designing Software is one of the most exciting things hes done aside from climbing the mountains
    
    Software is a form of expression 
        - communicating our intent via algorithms, design and code
    
    Design depends on problem we are trying to solve,application, domain, complexity etc 


What is design?

    1. Design is a mapping of a certain concept into a certain implementation

        The idea is to implement software in a way that not only solves the problem at hand but also easier to maintain and change

        Predicting the future is hard as a result we not only need to be able to create code but modify it later on as well

    
!!!!!!   Old Method of Doing Things  !!!!!!
BUFD - Big Up Front Design - Bad and outdated method
    Design in the beginning then implement it ( this simply doesn't work )


When should we create design created?

    Design is so important that it is done continuously in agile developement
    Design changes ALOT

How to know if the design is good?

    Its very difficult for anyone to be coding without designing at the same time.
    
    Joe example he always brings up (guy coding away than stops, looks up, and thinks) -> JID (Just in Time Design) 
        - We cannot code software without actively designing software thus it will actively evolve as we design software

Influence of languages and paradigms and design

random features being implemented
    - could lead to a feature that breaks everything

Judge features based on their value
    sort based on value
        if the client needs it to operate their business than it is considered high valued
        if it is a convience that is not needed to operate than it is low valued

    sort based on impact
        if the feature has a big impact on the architecture of the software

You want to start with the feature that has the highest value and most impactful on your software.
    prioritise impact to develope first

    if left.impact == right.impact
         do the one with a higher value

Any relevant application HAS TO CHANGE and is constantly evolving.


Software has entropy, the tendency to go bad. We constantly have to keep track and maintain it.

Software has a LIFESPAN

A good software is easy to understand and easy to modify (cheap to modify)

We can only know if a piece of software is good only after it has been created 

At every opportunity ask youself "Is the design going to be easy to change?"

The language we choose to implement with greatly influences our design 

Design is based on both the problem AND the language we implement it in



Why is it hard to develope software?

    relevance?
        if it is not relevant don't bother developing it
            (only 25 % of features are used)

    maintainability?
        
        this stems from the ability for us to understand the code we already have as well as making changes to it with breaking the existing code
            easier to maintain means we will be able to do more maintance (more maintance == more evolution)
            if its hard to maintain then we less maintance thus increasing the cost of changes to the softwarre (simple supply demand)

    1. Who is using it?
        someone other than us most the time thus makes it hard cause we can't know excatly what they want

    2. Who pays for it?
        your company or yourself (either way its bad for business)
        write it really well now and be careful due to the economic impact
    
    KEEP THE DESIGN SIMPLE 

    "Any fool can make something complex, It takes a genius to make something simple" - Einstein 
        (Don't be a fool, BE A GENIUS)

What is simple design?
    (not simple define)
    to venkat
        - A simple design is easier to understand (should be able to grasp it very quickly)
            - it is minimum and fails a lot less or (fails more gracefully)