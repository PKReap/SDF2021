HW3 Due 11:59PM November 19

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

According to the article <http://martinfowler.com/bliki/BeckDesignRules.html>, 
what are the rules of simple design. 
Why are these important? 
Discuss the impact of these principles. 
Give examples of using these principles in the class so far. 
Also give from examples outside of this class, but limit to your personal experiences.


The four rules that Kent Beck came up with for simple design goes in order as follows:
1 - Passes the tests
    This is the most important of the rules as it keeps code relevant makes sure the software works
2 - Reveals the intention
    Code is more often read than it is written, thus making your intentions clear leads to cleaner code
3 - No Duplication
    The most powerful of the rules adhere to the DRY principle.
4 - Fewest Element
    Anything that doesn't follow the above rules should be removed, this keeps code minimal and easier to maintain


These rules are important to follow as it they are a great guide to writing maintainable code. By following rule 1 (Passes the tests) we can ensure that what we are doing actually works and solves the issue at hand.
Following Rule 2 (Reveals the intention) allows us to self-document our code, rule 3 (No Duplication) leaves code much cleaner and easier to understand. Rule 4 (Fewest Element) makes code more maintainable if we adhere to Murphy's law where anything 
that can go wrong will go wrong, we can see that by having fewer elements there would also be fewer things that could potentially 
go wrong thus leading to more maintainable code.

There are occasions when rules will conflict with each other as pointed out in the blog such as when revealing the intention of a 
piece of code requires duplication. Kent suggests that in these instances we should have empathy
for the reader and focus on making code more readable in-loo of breaking the no duplication clause.
Prioritizing readability in the reader is important as it is better to make it clear for the reader rather than have it be vague. 
In these instances removing duplication might cause the code to be ambiguous thus less maintainable.

The impact of these rules can be seen in the design principles such as DRY, SRP, and OCP

DRY directly follows rule 3 of no duplication. By keeping this rule in mind when we're coding
our solutions become much clearer and easier to understand, this gets rid of noise in our code as well 
as reduces the elements required for the program thus also adhering to rule 4. 

SRP follows rule 2. By focusing a class or function on a single responsibility, the code becomes easier to understand and much simpler. 
This, in turn, leads to code that can document themselves 
revealing their intentions.

OCP follows rule 4 and rules 1. As we add more features to our existing software, we can better ensure that the software
still works as intended by designing to follow OCP thus reducing the code needed to be integrated when new features are added.
If the software is open for extension and closed for modification, we know that the existing platform works as intended and passes 
the test when we integrate new software. 
This in turn minimizes the elements needed as only what is necessary will be added.
Another Impact of these rules can be seen in a common mantra for TDD, RED GREEN REFACTOR
RED means to write tests that fail, GREEN means to pass the test, REFACTOR is the cleaning up phase 
These stages echo the rules that shape simple design. RED-GREEN follows rule 1 ensuring that the software passes the test,
REFACTOR is the phase that follows the rest of the rules. This is when we are reducing the noise in the code, making it more readable, 
and minimizing code to make it more maintainable.

An example of these principles being used in class so far can be seen in our assign3 program.
The code adheres to all the rules as it passes all the tests, the functions reveal their intentions,
no duplication was added, and the elements are minimal. We followed the first as seen by the test cases that pass our set up tests.
Any added functions do not affect the existing code bases as the program will still work as intended since we had followed OCP. 
This follows rule 4 of fewest elements as minimal code will be needed if more functions are added.
We had followed rule 3 of no duplication as seen in the charBlocker function which uses closures to reduce the effort needed to 
create blockers for each character or string. The code is extensible and the name was given to the function self-document what they do. 
This self-documentation follows rule 2 as the intention of each function reveal themselves 
through their implementation and the names given to them.

Another example of where we followed the rules of simple design is in assing1. By using an enum for our color 
variable we were able to clarify what was being passed in our selectedColors array allowing the code to reveal their intentions. 
The if statement at the beginning of the guess method of the MasterMind class is the simplest way to pass the tests we had set up for 
a game end condition. The use of the gameConditions object 
as part of the MasterMind class reveals their intended purpose as well as makes the class much more testable. 
The game condition allowed us to jump to any point in the game by setting the conditions needed, thus allowing 
us to minimize code when testing as well as reduce duplication and minimizing the code.

As a TA, Thien was helping a student who wanted to clean up their code for a coding assignment and 
he had noticed that the student was breaking the DRY principle and was duplicating the effort needed for the program. 
The program was to read from a CSV file of stocks prices and process the data to find the best method of buying and 
selling to achieve maximum profit. Now the way the student implemented it work and satisfied grading criteria for 
full marks on the assignment but there was a lot of unneeded effort duplicated and a lot of noise in the code. 
The student had written an if statement for each file of stock prices and repeated the steps for reading the for each one. 
Unable to stand this Thien gave the student some advice on following DRY and OCP principles. 
He suggested instead of an if statement for each file name maybe put it in a try-catch block. 
This would negate the need to repeat the if statements as well as allow for the processing of future files that follow 
the same format as the ones provided. He explained the principles to the student and helped the student make their code cleaner and easier to read as well as grade.

Total [10]: 10
