Assign3: Due 11:59PM October 29

In this assignment we will design a logical characters processor. 
The processor will receive a series of characters as input and produce a series of characters as output. 
The processor may house any number of processing blocks. 
Not all blocks that are available may be used when creating a processor. 
Also, a block may be used more than once. 
The order in which the blocks are used may also vary.
                                                            

		...input... -> | block1 block2 block3 ... | -> ...output...
                           Processor

Let's discuss some examples of blocks and then revisit the processor.

1. UpperCaseConverter Block
	Given a character, this block will send out or return the character in uppercase.

2. LowerCaseConverter Block
	Given a character, this block will send out or return the character in lowercase.
	
3. Multiplier Block
  Given a character, this block will send out or return two of the same character. 
  For example, if it received 'a', it will produce 'aa'. If it receives '1', it will produce '11'.

4. z-blocker Block
  Given a character, if the character is a lowercase 'z', this block will not return or produce anything. 
  If it is any other character, it will produce the given character as output. For example, 'a' will result in an output of 'a'.

5. Z-blocker Block
	This block will not return or produce an output if the character given is an uppercase 'Z'.
	
6. k-blocker Block
   This block will not return or produce an output if the character given is lowercase 'k'.

The program should allow end users to create other similar blocks they like.

The end user should be able to create a processor using any series of blocks.

For example, a user may create a processor with the following series of blocks:
	UpperCaseConverter - Z-blocker - LowerCaseConverter
	
After creating this processor, if a user were to send the following series of characters as input:

	11abcdabcdabcdzzaazzabcd

it will return the following output:

	11abcdabcdabcdaaabcd

In addition to designing a few sample blocks and the processor, we will create a console based driver program.
	
Design the program in such a way that:

1. A user can specify the blocks available for use before the program starts. This should include pre-defined blocks and user created blocks.

2. The user can specify, through a file, the blocks they'd like to use and the order or sequence in which they'd like to use them.

Think through the overall design of the program first. 
Then start with one small, but interesting and valuable part, and evolve the design and code incrementally.

After completing the assignment answer these questions:

1. What did you learn in this assignment?

We learned the benefits of design principles such as DRY, SRP, and OCP. Dry allowed for minimal code to achieve the maximum impact. 
SRP allowed us to be more flexible with our functions as we did not need to worry about them affecting another. OCP gave us the ability
make our program extensible without changing anything allowing smooth integration into our existing codebase. 
A new method of using scoping we learned was in the lexical scoping within inner functions as seen in the charBlocker. We were aware of lexical scoping in that a variable 
inside a method is only callable within the method, but we never thought of returning a function that uses a variable that was passed in,
to scope it inside an inner function before. We thought this was cool, so we used it again in our driver program which maps a given string to a 
function which returns a function that lexically scopes in an array of processors to process a given text allowing the user to create 
custom blocks from pre-defined blocks.

2. What design principles did you use? List each one of them, discuss what this principle is, and give example(s) of where specifically you used it in this assignment.

We used OCP in our design, allowing us to extend the functionality of our program. An example of this is our charBlocker function which takes in character and returns a function that removes that character from a given string. This function follows OCP as it is open to be extended to any characters from single to multiple characters,
which closes the need to modify the code. 

Another Place we followed OCP was the ProcessText function which takes in an array of any given functions and processes the given text. This opens up the function for 
extension as it could even take in user functions as needed thus closing it for modification.

The charBlocker function also follows the DRY principle as the given spec was to make z-blocker, Z-blocker, and k-blocker which all did essentially the same thing.
By combining the function into a general function that is extensible we prevent the need to repeat ourselves.

We also used SRP in our design as all the functions are responsible for doing one thing efficiently. 
All the processor functions are separated into their file and are responsible for their block.
None of the processors rely on another to achieve their functionality. 


2. What design patterns did you use? List each one of them, discuss what this pattern is, and give example(s) of where specifically you used it in this assignment.

We used the strategy pattern to achieve OCP for the charBlocker function. We noticed that the z-blocker, Z-blocker, and k-Blocker were all doing the same
thing just with a different character. So generalized the function and passed in a character in order to create a general strategy for removing a certain character
from a string.

The charBlocker function is also a form of the builder pattern. The function builds a function based on the character that was passed in. 
This allowed us to dynamically create blocker functions, following in OCP to provide extensibility to our program.

We used the chain of responsibility pattern to achieve the processText function. Since we followed SRP all our functions were responsible for a single functionality. 
To create the processText function we utilized this pattern to create a chain of functions that are each responsible for their processing of the text. These functions 
when chained together become a more powerful function adding extensibility and flexibility to our program. 

We also used the visitor pattern to give further extensibility to our program. In our driver we separated the blocks map from the predefined processor functions, so instead
of hard coding in the functions and names, the program took in a JSON object and dynamically created the blocks map structure upon runtime.
This decoupled the algorithm to process the text from the blocks structure allowing end-users to write and add their function to the code base.

Total [100]: 100
Program run and produces desires results [10]:
Program is design for extensibility to add new blocks [20]:
Test pass [10]:
Test quality [10]:
Code coverage [10]:
Design quality [20]:
Code quality [10]:
Response to questions [10]:
